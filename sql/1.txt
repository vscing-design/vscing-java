TODO：用户增加校验是否名称唯一
TODO: 增加修改密码接口
TODO：增加用户信息接口 查询修改
SELECT u.*, o.*, r.*, m.*
FROM admin_users u
LEFT JOIN admin_user_organizations uo ON u.id = uo.admin_user_id
LEFT JOIN organizations o ON uo.organization_id = o.id
LEFT JOIN admin_user_roles ur ON u.id = ur.admin_user_id
LEFT JOIN roles r ON ur.role_id = r.id
LEFT JOIN roles_menus rm ON r.id = rm.role_id
LEFT JOIN menus m ON rm.menu_id = m.id
WHERE u.id = ?

技术栈全面扩展开花🌼, JDK17+ SpringBoot3.0+Mybatis-Plus+GRPC+Webclient(非阻塞调用第三方接口) Java鸡架（微服务）+ MySQL+Redis+ElasticSearch数据库+ Nacos(2.0版本)+Apollo 服务注册/配置中心+ Mycat(分表) 一致性hash+RocketMQ4.7 + AmazonSQS 消息队列+ Redission分布式锁+日志存储 log4j+slf4j / 分布式日志存储ELK+Flume+Logstash
链接：https://juejin.cn/post/7374683456728760374

技术博主
https://juejin.cn/post/7346134710131851302
https://plus.hutool.cn/apidocs/
https://baomidou.com/

Master/Worker 架构

rtmp和webrtc
https://cloud.tencent.com/developer/article/2454047

php
https://github.com/Double-Jin/jin-microservices

golang
https://github.com/onanying
https://github.com/Double-Jin
https://github.com/go-dev-frame
https://github.com/stelin

动画
https://github.com/pmndrs/react-spring

二哥的Java进阶之路
https://javabetter.cn/springboot/Filter-Interceptor-Listener.html#%E5%89%8D%E8%A8%80

https://gitee.com/breezefaith/fast-alden

swagger的Config配置
https://juejin.cn/post/7441998838565945359?from=search-suggest

Redisson、Jedis、Lettuce 是三个不同的操作 Redis 的客户端

MinIO 文件存储https://juejin.cn/post/7443658338867134518

logback-spring 配置路径  https://juejin.cn/post/6844903701870542855

https://lanhuapp.com/link/#/invite?sid=qX0OtgDQ
密码: V8Af

全局错误日志加判断，正式环境不展示出来

mqtt 测试地址 https://juejin.cn/post/7410017851626913833

- https://gitee.com/dromara/RuoYi-Vue-Plus
- 错误提示
- 测试分页列表
- 测试关联列表
- MD5加密工具类
- AES加密
- 获取IP的工具类
- Url构建工具类
- Http接口请求工具
- 正则表达式工具类
- AOP相关的工具
- Session工具类
- XSS https://juejin.cn/post/6996598745454346247?searchId=20241221091351D34CED46B811E476BC1F
- sql注入https://juejin.cn/search?query=%E5%B8%B8%E8%A7%81%E7%9A%84web%E6%94%BB%E5%87%BB%E6%9C%89%E5%93%AA%E4%BA%9B&utm_source=gold_browser_extension&utm_medium=search


import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

public class Body {
    private int code;
    private String message;
    private List<City> data;

    // getters and setters
}

public class City {
    private String cityName;
    private int cityId;
    private String firstLetter;
    private int isHot;
    private String provinceName;
    private List<Region> regions;
    private String cityCode;

    // getters and setters
}

public class Region {
    private String regionName;
    private int regionId;

    // getters and setters
}

import com.fasterxml.jackson.databind.ObjectMapper;

// ...

ObjectMapper mapper = new ObjectMapper();
Body body = mapper.readValue(jsonResponse, Body.class);

for (City city : body.getData()) {
    // 执行数据库操作
}

import java.sql.*;

// ...

Connection conn = null;
try {
    conn = DriverManager.getConnection(url, username, password);
    conn.setAutoCommit(false); // 开始事务

    for (City city : body.getData()) {
        String cityCode = city.getCityCode();
        // 检查cityCode是否存在于city表中
        String cityQuery = "SELECT * FROM city WHERE city_code = ?";
        try (PreparedStatement cityStmt = conn.prepareStatement(cityQuery)) {
            cityStmt.setString(1, cityCode);
            ResultSet rs = cityStmt.executeQuery();
            if (rs.next()) {
                // 更新city表
                String cityUpdate = "UPDATE city SET city_id = ? WHERE city_code = ?";
                try (PreparedStatement cityUpdateStmt = conn.prepareStatement(cityUpdate)) {
                    cityUpdateStmt.setInt(1, city.getCityId());
                    cityUpdateStmt.setString(2, cityCode);
                    cityUpdateStmt.executeUpdate();
                }
            }
        }

        // 检查cityCode是否存在于area表中
        String areaQuery = "SELECT * FROM area WHERE city_code = ?";
        try (PreparedStatement areaStmt = conn.prepareStatement(areaQuery)) {
            areaStmt.setString(1, cityCode);
            ResultSet rs = areaStmt.executeQuery();
            if (rs.next()) {
                // 更新area表
                String areaUpdate = "UPDATE area SET city_id = ? WHERE city_code = ?";
                try (PreparedStatement areaUpdateStmt = conn.prepareStatement(areaUpdate)) {
                    areaUpdateStmt.setInt(1, city.getCityId());
                    areaUpdateStmt.setString(2, cityCode);
                    areaUpdateStmt.executeUpdate();
                }
            }
        }

        // 遍历regions
        for (Region region : city.getRegions()) {
            // 检查regionName是否存在于area表中
            String regionQuery = "SELECT * FROM area WHERE name = ?";
            try (PreparedStatement regionStmt = conn.prepareStatement(regionQuery)) {
                regionStmt.setString(1, region.getRegionName());
                ResultSet rs = regionStmt.executeQuery();
                if (rs.next()) {
                    // 更新area表
                    String regionUpdate = "UPDATE area SET region_id = ? WHERE name = ?";
                    try (PreparedStatement regionUpdateStmt = conn.prepareStatement(regionUpdate)) {
                        regionUpdateStmt.setInt(1, region.getRegionId());
                        regionUpdateStmt.setString(2, region.getRegionName());
                        regionUpdateStmt.executeUpdate();
                    }
                }
            }
        }
    }

    conn.commit(); // 提交事务
} catch (SQLException e) {
    if (conn != null) {
        try {
            conn.rollback(); // 回滚事务
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    e.printStackTrace();
} finally {
    if (conn != null) {
        try {
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}



