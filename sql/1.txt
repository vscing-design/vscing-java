技术栈全面扩展开花🌼, JDK17+ SpringBoot3.0+Mybatis-Plus+GRPC+Webclient(非阻塞调用第三方接口) Java鸡架（微服务）+ MySQL+Redis+ElasticSearch数据库+ Nacos(2.0版本)+Apollo 服务注册/配置中心+ Mycat(分表) 一致性hash+RocketMQ4.7 + AmazonSQS 消息队列+ Redission分布式锁+日志存储 log4j+slf4j / 分布式日志存储ELK+Flume+Logstash

作者：呆呆蛇
链接：https://juejin.cn/post/7374683456728760374
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

二哥的Java进阶之路
https://javabetter.cn/springboot/Filter-Interceptor-Listener.html#%E5%89%8D%E8%A8%80

https://gitee.com/breezefaith/fast-alden

swagger的Config配置
https://juejin.cn/post/7441998838565945359?from=search-suggest

Redisson、Jedis、Lettuce 是三个不同的操作 Redis 的客户端

MinIO 文件存储https://juejin.cn/post/7443658338867134518

logback-spring 配置路径  https://juejin.cn/post/6844903701870542855

id 转字符串、过滤不要字符（定义视图类）

接口入参调整、批量删除和批量修改、批量新增

<plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <arguments>
                            <argument>--spring.profiles.active=${spring.profiles.active}</argument>
                        </arguments>
                        <excludes>
                            <exclude>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                            </exclude>
                        </excludes>
                    </configuration>
                </plugin> 增加mapstruct和mapstruct-processor过滤



                @Bean
                    protected SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

                        // 忽略的路径
                        http.authorizeHttpRequests(authorize -> authorize
                            .requestMatchers(securityProperties.getUrls().toArray(new String[0])).permitAll() // 使用配置文件中的白名单URL
                            .anyRequest().authenticated()); // 其他所有请求需要认证

                        http
                            // 禁用CSRF保护
                            .csrf(AbstractHttpConfigurer::disable)
                            // 由于使用的是JWT，CORS保护也可以禁用
                            .cors(AbstractHttpConfigurer::disable)
                            // 禁用session
                            .sessionManagement(session -> session
                                .sessionCreationPolicy(SessionCreationPolicy.STATELESS));

                        // 添加自定义未授权和未登录结果返回
                        http.exceptionHandling(exceptionHandling -> exceptionHandling
                            .accessDeniedHandler(restfulAccessDeniedHandler) // 自定义处理未授权
                            .authenticationEntryPoint(restfulAuthenticationEntryPoint)) // 自定义处理未登录
                            // 添加JWT过滤器
                            .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);

                        // 动态权限配置时添加动态权限校验过滤器
                //        if (dynamicSecurityService != null) {
                //            http.addFilterBefore(dynamicSecurityFilter, FilterSecurityInterceptor.class);
                //        }

                        return http.build();
                    }
增加配置开关，来选择是否拦截请求

